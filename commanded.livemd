<!-- livebook:{"file_entries":[{"file":{"file_system_id":"local","file_system_type":"local","path":"/Users/mnecibi/Documents/MyProjects/Meetups/Commanded/foodbank/data/meetup_cologne.jpeg"},"name":"meetup_cologne.jpeg","type":"file"}]} -->

# Commanded: From theory to reality

## Welcome

![image](http://localhost:8080/data/meetup_cologne.jpeg)

<!-- livebook:{"break_markdown":true} -->

### Presentation + Code Examples

![image](http://localhost:8080/data/github_qr_code.png)

https://github.com/mnecibi/foodbank

## About us

### Mehdi

```mermaid
timeline
    section Education - 5 years
      Computer science student : Discovered func-programming (Ocaml)
    section Java - 5 years
      Fullstack Developer: Java + JS Frontend frameworks + Adobe Products
    section Elixir - 2 years
      Fullstack Developer: Elixir + Phoenix/Liveview + Docker/Kubernetes
```

<!-- livebook:{"break_markdown":true} -->

#### Arne

```mermaid
timeline
    section Education - 1 year
      Retraining programing in Web development: Javascript, React, HTML, CSS 
   
    section Elixir - 1 year +
       Fullstack Developer: Elixir + Phoenix/Liveview 
```

<!-- livebook:{"break_markdown":true} -->

### Inspired Consulting GmbH

```mermaid
pie title Projects Programming Languages
    "Elixir" : 40
    "Other (Java, Go ..etc)" : 60
```

## Core concepts

### Traditional System

<br />

<br />

<br />

```mermaid
block-beta
columns 1
  block:ID
    B["Command Operations
(insert/update/delete)"]
    C["Query Operations
(read/search/scan)"]
  end
  space
  D[("Database")]
  B --> D
  C --> D
```

<br />

<br />

<br />

<br />

<!-- livebook:{"break_markdown":true} -->

### CQRS (Command Query Responsibility Segregation)

<br />

<br />

<br />

<br />

```mermaid
block-beta
columns 1
  block:CO
    A["Command Operations
(insert/update/delete)"]
    CD[("Command DB")]
  end
  space
  block:QO
    B["Query Operations
(read/search/scan)"]
    QD[("Query DB")]
  end
  A --> CD 
  B --> QD
  QD --> CD
```

<br />

<br />

<br />

<br />

<!-- livebook:{"break_markdown":true} -->

### Event Sourcing

<br />

```mermaid
timeline
      Event 1 : BankAccountCreated : account_id 1 <br> initial_balance 0€
      Event 2 : MoneyDeposited : account_id 1 <br> amount 100€
      Event 3 : MoneyWithdraw : account_id 1 <br> amount 100€

```

<br />

<!-- livebook:{"break_markdown":true} -->

### Commanded

```mermaid
block-beta
  columns 5
  space
  block:ui_top:3
    columns 2

    UI1
    UI2
  end

  space
  UI

  block:logic_group:3
    columns 1

    block:QS
      columns 2
      QM1["Query Model 1"]
      QM2["Query Model 2"]
    end

    block:CS
      columns 2

      CM["Command Model"]
    end
  end

  block:db_group
    columns 1

    QDB[("Query DB")]
    space
    EDB[("EventStore")]
  end
UI1 --> QM1
UI2 --> QM2
QS --> QDB
CS --> EDB
UI --> CM
```

<!-- livebook:{"break_markdown":true} -->

### Commanded = CQRS + EventSourcing + Domain driver design

<br />

* Commands
* Events
* Aggregate
* Projections

<br />

<br />

## Code Example - Commanded Project

#### Commands

```elixir
defmodule Command.CreateTour do
  use TypedStruct

  typedstruct do
    field(:tour_id, binary())
    field(:name, String.t())
    field(:locations, [map()])
  end
end
```

#### Events

```elixir
defmodule Event.TourCreated do
  use TypedStruct
  use Foodbank.Event.EctoJsonSerializer.Decoder
  use Foodbank.Event.EctoJsonSerializer.Upcaster

  typedstruct do
    field(:tour_id, binary())
    field(:name, String.t())
    field(:locations, [map()])
  end
end
```

#### Aggregate

<!-- livebook:{"break_markdown":true} -->

Domain Driven Design

* State
* Gate Keeper

```elixir
defmodule Foodbank.Tour.Aggregate do
  use TypedStruct

  alias __MODULE__

  typedstruct do
    field(:tour_id, binary())
    field(:name, String.t())
    field(:locations, [map()])
  end

  def execute(aggregate, %Command.CreateTour{tour_id: tour_id, name: name, locations: locations}) do
    with :ok <- validate_does_not_exist(aggregate) do
      %Event.TourCreated{tour_id: tour_id, name: name, locations: locations}
    end
  end

  def apply(_aggregate, %Event.TourCreated{} = event) do
    %Aggregate{tour_id: event.tour_id, name: event.name, locations: event.locations}
  end

  def validate_does_not_exist(%Aggregate{tour_id: nil}), do: :ok
  def validate_does_not_exist(%Aggregate{}), do: {:error, :document_already_exists}
end

```

## Router

```elixir
defmodule Foodbank.Router do
  use Commanded.Commands.Router, application: Foodbank.Commanded

  identify(Foodbank.Tour.Aggregate, by: :tour_id, prefix: "foodbank__tour_")

  dispatch([Command.CreateTour], to: Foodbank.Tour.Aggregate)
end
```

#### Let's create a tour

```elixir
%Command.CreateTour{
  tour_id: Ecto.UUID.generate(),
  name: "My Tour",
  locations: [
    %{
      address: "Avenue des champs-élysées, Paris",
      market_name: "Aldi"
    },
    %{
      address: "Place de la concorde, Paris",
      market_name: "Lidl"
    },
    %{
      address: "Place vendôme, Paris",
      market_name: "Lidl"
    }
  ]
}
|> Foodbank.Router.dispatch()
```

```elixir
{:ok, events} = Foodbank.EventStore.read_all_streams_forward()
```

### Create Tables from Events

```elixir
defmodule Foodbank.DBTour do
  use Ecto.Schema
  use TypedEctoSchema
  import Ecto.Changeset
  
  @primary_key {:tour_id, Ecto.UUID, autogenerate: false}
  typed_schema "tours" do
    field :name, :string
    field :locations, {:array, :map}
  end

  def changeset(tour \\ %__MODULE__{}, attrs) do
    tour
    |> cast(attrs, __schema__(:fields))
  end
end

defmodule Migrations.CreateTourTable do
  use Ecto.Migration

  def change do
    create table(:tours, primary_key: false) do
      add(:tour_id, :uuid, primary_key: true)
      add(:name, :name)
      add(:locations, :jsonb)
    end
  end
end

Ecto.Migrator.up(Foodbank.Repo, 1, Migrations.CreateTourTable)
```

### Populate the `tours` table using a Projector

```elixir
defmodule Foodbank.Tour.Projector do
  alias Foodbank.DBTour

  alias Event.TourCreated

  use Commanded.Projections.Ecto, name: "TourProjection", repo: Foodbank.Repo

  project(%TourCreated{} = event, _, fn multi ->
    Ecto.Multi.insert(multi, :tour, %DBTour{tour_id: event.tour_id, name: event.name, locations: event.locations})
  end)
end
```

```elixir
Foodbank.Tour.Projector.start_link(application: Foodbank.Commanded)
```

```elixir
Foodbank.DBTour |> Foodbank.Repo.all()
```

```elixir
defmodule Foodbank.DBMarketStatistics do
  use Ecto.Schema
  use TypedEctoSchema
  
  @primary_key false
  typed_schema "market_statistics" do
    field :name, :string, primary_key: true
    field :nb_tour_usage, :integer
  end
end

defmodule Migrations.CreateMarketStatisticsTable do
  use Ecto.Migration

  def change do
    create table(:market_statistics, primary_key: false) do
      add(:name, :name, primary_key: true)
      add(:nb_tour_usage, :integer)
    end
  end
end

Ecto.Migrator.up(Foodbank.Repo, 2, Migrations.CreateMarketStatisticsTable)
```

```elixir
Foodbank.DBMarketStatistics |> Foodbank.Repo.all()
```

```elixir
defmodule Foodbank.Statistics.Projector do
  alias Foodbank.DBMarketStatistics
  alias Event.TourCreated

  use Commanded.Projections.Ecto, name: "StatisticsProjection", repo: Foodbank.Repo

  project(%TourCreated{} = event, _, fn multi ->
    Enum.reduce(event.locations, multi, fn location, acc_multi -> 
      
      Ecto.Multi.insert(acc_multi, "market_statistics_#{Ecto.UUID.generate()}", 
        %DBMarketStatistics{
          name: Map.get(location, "market_name"), nb_tour_usage: 1
        },
        on_conflict: [inc: [nb_tour_usage: 1]],
        conflict_target: [:name])
    end)
  end)
end
```

```elixir
Foodbank.Statistics.Projector.start_link(application: Foodbank.Commanded)
```

```elixir
Foodbank.DBMarketStatistics |> Foodbank.Repo.all()
```

#### More use cases

* Notifications
* Mails
* Generate reports (csv/pdf documents)

<!-- livebook:{"break_markdown":true} -->

#### Commanded Pros

* Simplifying complex domain modeling
* Provide tools to handle events and projections
* Sepration of conserns (Data model do not leak from one use case to another)

#### Commanded Cons

* Complexiting (Learning Curve)
* Managing consistency in projections
* Event Replay (for large event stores)

#### Bonus Topics

* Debugging and Error Recovery
* Historic State (Time Travel)
* Data security (GDPR)
* Authentication

<!-- livebook:{"break_markdown":true} -->

![questions?](http://localhost:8080/data/questions_meme.jpg)

<!-- livebook:{"offset":8541,"stamp":{"token":"XCP.sAtfda-6kd6AQ2foHhw9tQa3cGDM5dvJBPjjv9un8YyP3zRC06dfe7Tob26jWxwOUm780dokyo91UVJu49fnQ27dxXz6UOS_gccNJA","version":2}} -->
